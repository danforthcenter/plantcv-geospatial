# Save georeferenced TIF files from plantcv segmented masks

import rasterio
import fiona
from rasterio.mask import mask


def save_geotif(img, in_path, out_path, cropto=None, nodata=None):
    """Save Georeferenced TIF file from image.

    Parameters
    ----------
    img : ndarray
        Image to be saved, could be a segmented mask generated by PlantCV.
    in_path : str
        Path to the original geotif used to generate output mask.
    out_path : str
        Path to save the output geotif.
    cropto : str, optional
        Path the the shapefile used to crop the original input image.
    nodata : int or float, optional
        Value to assign as "no data" during saving out.
    """
    # Works for polygons and Multipolygons
    if cropto:
        with fiona.open(cropto, 'r') as shapefile:
            shapes = [feature['geometry'] for feature in shapefile]
        with rasterio.open(in_path) as src:
            inimg, transform = mask(src, shapes, crop=True)
            meta = src.meta.copy()
    else:
        with rasterio.open(in_path) as src:
            inimg = src.read()
            transform = src.transform
            meta = src.meta.copy()
    # Update metadata - change count in case input image has mask layer
    meta.update({
        "driver": "GTiff",
        "height": inimg.shape[1],
        "width": inimg.shape[2],
        "transform": transform,
        "dtype": "uint8",
        "count": 3,
        "nodata": nodata
    })

    # For color outputs
    if len(img.shape) == 3:
        # Reorder dimensions
        outimg = img.transpose(2, 0, 1)
        # Reorder channels if needed
        chord = [2, 1, 0]
        # For multispec
        if outimg.shape[0] > 3:
            meta.update({
                "count": outimg.shape[0]
            })
            for i in range(outimg.shape[0]-3):
                chord.append(i+3)
        outimg = outimg[chord, :, :]
        with rasterio.open(out_path, 'w', **meta) as dest:
            dest.write(outimg)
    # For binary outputs
    elif len(img.shape) == 2:
        meta.update({
            "count": 1
        })
        with rasterio.open(out_path, 'w', **meta) as dest:
            dest.write(img, 1)
