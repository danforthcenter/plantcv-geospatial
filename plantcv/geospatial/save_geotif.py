# Save georeferenced TIF files from plantcv segmented masks

import rasterio
from rasterio.mask import mask


def save_geotif(out_img, in_img, out_path, nodata=None):
    """Save Georeferenced TIF file from image.

    Parameters
    ----------
    out_img : ndarray
        Image to be saved, could be a segmented mask generated by PlantCV.
    in_img : str
        Spectral_data object created by read_geotif.
    out_path : str
        Path to save the output geotif.
    nodata : int or float, optional
        Value to assign as "no data" during saving out.
    """
    metadata = in_img.metadata.copy()
    # Update metadata - change count in case input image has mask layer
    metadata.update({
        "driver": "GTiff",
        "height": out_img.shape[0],
        "width": out_img.shape[1],
        "dtype": "uint8",
        "count": 3,
        "nodata": nodata
    })
    # Read in channels to know if reordering is necessary
    waves = in_img.wavelength_dict

    # For color outputs
    if len(out_img.shape) == 3:
        # Reorder dimensions
        out_img = out_img.transpose(2,0,1)
        # Reorder channels if needed
        chord = [waves[480], waves[560], waves[650]]
        # For multispec
        if out_img.shape[0] > 3:
            metadata.update({
                "count": out_img.shape[0]
            })
            for i in range(out_img.shape[0]-3):
                chord.append(i+3)
        out_img = out_img[chord, :, :]
        with rasterio.open(out_path, 'w', **metadata) as dest:
            dest.write(out_img)
    # For binary outputs
    elif len(out_img.shape) == 2:
        metadata.update({
            "count": 1
        })
        with rasterio.open(out_path, 'w', **metadata) as dest:
            dest.write(out_img, 1)
